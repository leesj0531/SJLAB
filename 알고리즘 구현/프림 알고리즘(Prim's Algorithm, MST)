/*
==========================================================================================
    * 무향 가중치 그래프 Minimum Spanning Tree(MST) 생성 방법 - 프림(Prim) 알고리즘 구현.
    * 우선순위 큐(Min heap)로 구현.
    * 입력
        1st line : 삽입할 간선 개수
        2nd ~    : 정점1 정점2 간선가중치 (ex- 1 3 6) 순으로 입력
    * 출력
        최종 삽입 이후 MST 연결 순서대로 "정점 - 연결된 간선 가중치" 출력
==========================================================================================
*/
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
struct weighted_edge {		// 가중치 엣지 저장용 구조체
	int adjacent_v;
	int weight;
};
struct my_cmp__greater {	// 우선순위 큐 정렬 custom 함수
	bool operator()(weighted_edge n1, weighted_edge n2) {
		return n1.weight > n2.weight;
	}
};
int visit[10001];			// 최종 생성되는 MST 정점 의미.
vector<weighted_edge> edge[100001];
// priority_queue : <자료형, 구현체, 비교연산자>.  ex)  priority_queue<int, vector<int>, greater<int>> pq;
priority_queue<weighted_edge, vector<weighted_edge>, my_cmp__greater> fringe;
void prims_algorithm(int start_key) {
	// 첫 vertex
	cout << start_key << "    start spanning\n";
	visit[start_key] = 1;
	for (auto it : edge[start_key]) {
		fringe.push(it);
	}
	// Spanning
	weighted_edge min_v;
	while (!fringe.empty()) {
		min_v = fringe.top();
		fringe.pop();
		if (visit[min_v.adjacent_v]) {		// min_v 정점이 이미 Tree에 들어간 경우 skip.
			continue;
		}
		cout << min_v.adjacent_v << "    -weight : " << min_v.weight << "\n";
		visit[min_v.adjacent_v] = 1;		// Greedy 선택. 현재 weight값 가장 작은 애가 최적.
		for (auto it : edge[min_v.adjacent_v]) {
			if (!visit[it.adjacent_v]) {	// 만약, 이미 fringe에 같은 엣지가 있다 해도 상관 없음. min w 기준 tree생성 후 채워졌다면 for문 전 조건에서 탈락.
				fringe.push(it);
			}
		}
	}
}
int main() {
	int edge_num, v1, v2, w;
	weighted_edge temp_edge;
	cin >> edge_num;
	while (edge_num--) {
		cin >> v1 >> v2 >> w;
		temp_edge.adjacent_v = v2;
		temp_edge.weight = w;
		edge[v1].push_back(temp_edge);
		temp_edge.adjacent_v = v1;
		edge[v2].push_back(temp_edge);
	}
	prims_algorithm(v1);
}
