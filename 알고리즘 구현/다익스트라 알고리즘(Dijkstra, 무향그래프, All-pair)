/*
==============================================================================================================================
	* 무향 가중치 그래프 : 모든 쌍 최단 경로(All-Pair Shortest Path) 탐색 방법 - 다익스트라(Dijkstra) 알고리즘 구현.
	* 브루트포스 : unsorted 배열로 구현.
	* 다익스트라 : 우선순위 큐(Min-heap) 자료구조로 구현.
	* n : n 알고리즘 구현.
	* 입력
		1st line : 삽입 정점 개수, 삽입 간선 개수.
		2nd ~    : 정점1, 정점2, 간선가중치 (ex- 1 3 6) 순으로 입력
	* 출력
		최종 삽입 이후 정점 1 ~ end 까지 "각 정점으로 가는 경로 최단 가중치" 매트릭스 출력
	
입출력 예시
9 14
2 3 1
1 2 8
5 4 10
7 6 7
3 4 2
5 6 9
7 8 8
7 9 2
9 2 7
9 3 6
8 2 11
7 4 4
4 6 14
1 8 4
==============================================================================================================================
*/
#include <iostream>
#include <vector>
#include <queue>
#include <limits.h>
#include <cstring>
using namespace std;
struct weighted_edge {		// 가중치 엣지 저장용 구조체
	int adjacent_v;
	long long weight;
};
vector<weighted_edge> edge[10001];
int visit[10001];			// 최종 생성되는 MST 정점 의미.
struct my_cmp__greater {	// 우선순위 큐 정렬 custom 함수
	bool operator()(weighted_edge n1, weighted_edge n2) {
		return n1.weight > n2.weight;
	}
};
long long** Dijkstra_multiSP(long long** dist_matrix, int start_key) {
	// 첫 vertex
	priority_queue<weighted_edge, vector<weighted_edge>, my_cmp__greater> fringe;
	visit[start_key] = 1;		// 시작 정점별로 visit값 초기화해서 경로 구함.
	for (auto it : edge[start_key]) {
		fringe.push(it);
	}
	// Spanning
	weighted_edge min_f;
	long long target_weight;
	int target_vertex;
	while (!fringe.empty()) {
		target_vertex = fringe.top().adjacent_v;
		target_weight = fringe.top().weight;
		fringe.pop();
		if (visit[target_vertex]) {		// target_vertex가 이미 Tree에 들어간 경우 skip.
			continue;
		}
		// Update shortest path 
		dist_matrix[start_key][target_vertex] = target_weight;
		visit[target_vertex] = 1;		// Greedy 선택. 현재 weight값 가장 작은 애가 최적.
		for (auto it : edge[target_vertex]) {
			if (!visit[it.adjacent_v]) {
				min_f = it;
				min_f.weight += target_weight;
				fringe.push(min_f);
			}
		}
	}
	return dist_matrix;
}
long long** Naive_multiSP(long long** dist_matrix, int vertex_num) {
	// 정점 간 Distance 매트릭스 초기화
	for (int i = 1; i <= vertex_num; i++) {			// O(N^2)
		for (int j = i; j <= vertex_num; j++) {
			if (i == j) {				// diagonal 성분 0
				dist_matrix[i][j] = 0;
				continue;
			}
			int is_break = 0;
			for (auto it : edge[i]) {	// vertex j가 i와 인접 -> 간선 가중치 저장
				if (it.adjacent_v == j) {
					dist_matrix[i][j] = dist_matrix[j][i] = it.weight;
					is_break = 1;
					break;
				}
			}
			if (!is_break) dist_matrix[i][j] = dist_matrix[j][i] = INT_MAX;		// i, j 간선 없으면 ∞
		}
	}
	// Path k를 하나씩 해방하며 경로 갱신  ->  O(N^3)
	for (int k = 1; k <= vertex_num; k++)
		for (int i = 1; i <= vertex_num; i++)
			for (int j = i; j <= vertex_num; j++)
				dist_matrix[i][j] = dist_matrix[j][i] = min(dist_matrix[i][j], dist_matrix[i][k] + dist_matrix[k][j]);
	return dist_matrix;
}
int main() {
	int vertex_num, edge_num, w, v1, v2;
	weighted_edge temp_edge;
	cin >> vertex_num >> edge_num;

	// 2차원 정점 매트릭스 할당(n to n distance)
	long long** apsp = new long long* [vertex_num + 1];
	for (int i = 1; i <= vertex_num; i++) apsp[i] = new long long[vertex_num + 1];

	// 간선 정보 입력
	while (edge_num--) {
		cin >> v1 >> v2 >> w;
		temp_edge.weight = w;
		temp_edge.adjacent_v = v2;
		edge[v1].push_back(temp_edge);
		temp_edge.adjacent_v = v1;
		edge[v2].push_back(temp_edge);
	}
	// ============ 브루트포스 =============== 
	// Naive approach  ->  O(N^3)
	apsp = Naive_multiSP(apsp, vertex_num);

	// Distance 저장 결과 출력
	cout << "-------------------\n";
	for (int i = 1; i <= vertex_num; i++) {
		for (int j = 1; j <= vertex_num; j++) {
			cout << apsp[i][j] << " ";
		}
		cout << "\n";
	}

	// ============ 다익스트라 =============== 
	// Dijkstra_algorithm  ->  O(nm log n)
	for (int i = 1; i <= vertex_num; i++)
		for (int j = 1; j <= vertex_num; j++)
			apsp[i][j] = 0;
	for (int k = 1; k <= vertex_num; k++) {
		apsp = Dijkstra_multiSP(apsp, k);
		memset(visit, 0, sizeof(visit));
	}

	// Distance 저장 결과 출력
	cout << "-------------------\n";
	for (int i = 1; i <= vertex_num; i++) {
		for (int j = 1; j <= vertex_num; j++) {
			cout << apsp[i][j] << " ";
		}
		cout << "\n";
	}
}
