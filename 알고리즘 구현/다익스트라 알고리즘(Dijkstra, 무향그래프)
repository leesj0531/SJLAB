/*
==============================================================================================================================
	* 무향 가중치 그래프 : 단일 최단 경로(Single Source Shortest Path) 탐색 방법 - 다익스트라(Dijkstra) 알고리즘 구현.
	* 최소 우선순위 큐 자료구조로 구현.
	* 1 : n 알고리즘 구현. 만약 1 : 1 상황인 경우 "종료 노드 sssp 입력 시 종료 조건" 추가 필요.
	* 입력
		1st line : 삽입 정점 개수, 삽입 간선 개수, 시작 노드 키(+ 종료 노드 키).
		2nd ~    : 정점1, 정점2, 간선가중치 (ex- 1 3 6) 순으로 입력
	* 출력
		최종 삽입 이후 MST 연결 순서대로 "시작 to 연결된 정점 - 경로 최단 가중치" 출력
==============================================================================================================================
*/
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
struct weighted_edge {		// 가중치 엣지 저장용 구조체
	int adjacent_v;
	int weight;
};
struct my_cmp__greater {	// 우선순위 큐 정렬 custom 함수
	bool operator()(weighted_edge n1, weighted_edge n2) {
		return n1.weight > n2.weight;
	}
};
int visit[10001];			// 최종 생성되는 MST 정점 의미.
vector<weighted_edge> edge[10001];
vector<int> sssp;
priority_queue<weighted_edge, vector<weighted_edge>, my_cmp__greater> fringe;
void Dijkstra_algorithm(int start_key) {
	// 첫 vertex
	visit[start_key] = 1;
	for (auto it : edge[start_key]) {
		fringe.push(it);
	}
	// Spanning
	weighted_edge min_f;
	int target_weight;
	int target_vertex;
	while (!fringe.empty()) {
		target_weight = fringe.top().weight;
		target_vertex = fringe.top().adjacent_v;
		fringe.pop();
		//if (target_vertex == end_vertex) {		// 1 : 1 최단 경로인 경우
		//	cout << min_v.weight << " <--end vertex. Terminate Algorithm.\n";
		//	break;
		//}
		if (visit[target_vertex]) {		// target_vertex가 이미 Tree에 들어간 경우 skip.
			continue;
		}
		// Update shortest path 
		sssp[target_vertex] = target_weight;
		visit[target_vertex] = 1;		// Greedy 선택. 현재 weight값 가장 작은 애가 최적.
		for (auto it : edge[target_vertex]) {
			if (!visit[it.adjacent_v]) {
				min_f = it;
				min_f.weight += sssp[target_vertex];
				fringe.push(min_f);
			}
		}
	}
}
int main() {
	int vertex_num, edge_num, start_node_key, w, v1, v2;
	weighted_edge temp_edge;
	cin >> vertex_num >> edge_num >> start_node_key;
	sssp.resize(vertex_num + 1);			// Set SSSP List Capacity
	while (edge_num--) {
		cin >> v1 >> v2 >> w;
		sssp[v1] = 0;
		sssp[v2] = 0;
		temp_edge.weight = w;
		temp_edge.adjacent_v = v2;
		edge[v1].push_back(temp_edge);
		temp_edge.adjacent_v = v1;
		edge[v2].push_back(temp_edge);
	}
	Dijkstra_algorithm(start_node_key);
	// 1 대 n SSSP 출력
	cout << "-------------------\nStarting vertex : " << start_node_key << "\n   i  &       sssp[i]\n";
	for (int i = 1; i < sssp.size(); i++) {
		if (i == start_node_key) continue;
		cout << "1 to " << i << "    - weight : " << sssp[i] << "\n";
	}
}
