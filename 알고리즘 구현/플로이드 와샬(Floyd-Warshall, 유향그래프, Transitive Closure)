/*
==============================================================================================================================
	* 유향 그래프 : Transitive Closure - 플로이드 와샬(Floyd Warshall) 알고리즘 구현.
	* 인접 매트릭스(Matrix) 구조로 구현.
	* 입력
		1st line : 삽입 정점 개수, 삽입 간선 개수
		2nd ~    : 나가는 정점1   들어오는 정점2 (ex- 1 3) 순으로 입력
	* 출력
		최종 삽입 이후 정점 1 ~ end 까지 "각 정점으로 가는 유향경로(1:존재 0:부재)" 매트릭스 출력

입출력 예시
7 13
5 1
3 1
3 4
1 4
6 5
7 5
7 6
6 3
4 3
5 3
3 2
6 2
6 7
==============================================================================================================================
*/
#include <iostream>
#include <cstring>
using namespace std;
void Floyd_Warshall(int** edge_matrix, int vertex_num) {
	for (int k = 1; k <= vertex_num; k++) {
		for (int i = 1; i <= vertex_num; i++) {
			if (i == k) continue;
			for (int j = 1; j <= vertex_num; j++) {
				if (j == k || j == i) continue;
				else if (edge_matrix[i][k] && edge_matrix[k][j] && !edge_matrix[i][j]) {
					edge_matrix[i][j] = 1;
				}
			}
		}
	}
}
int main() {
	int vertex_num, edge_num, v1, v2;
	cin >> vertex_num >> edge_num;

	// 2차원 간선 배열 생성 & 초기화
	int** tc = new int* [vertex_num + 1];
	for (int i = 1; i <= vertex_num; i++) {
		tc[i] = new int[vertex_num + 1]{ 0 };
	}
	for (int i = 0; i < edge_num; i++) {
		cin >> v1 >> v2;
		tc[v1][v2] = 1;
	}
	Floyd_Warshall(tc, vertex_num);

	// Floyd Warshall 저장 결과 출력
	cout << "-------------------\n";
	for (int i = 1; i <= vertex_num; i++) {
		for (int j = 1; j <= vertex_num; j++) {
			cout << tc[i][j] << " ";
		}
		cout << "\n";
	}
}
