#include <iostream>
using namespace std;
//push X : 정수 X를 큐에 넣는 연산이다.
//pop : 큐에서 가장 앞에 있는 정수를 빼고, 그 수를 출력한다.만약 큐에 들어있는 정수가 없는 경우에는 - 1을 출력한다.
//size : 큐에 들어있는 정수의 개수를 출력한다.
//empty : 큐가 비어있으면 1, 아니면 0을 출력한다.
//front : 큐의 가장 앞에 있는 정수를 출력한다.만약 큐에 들어있는 정수가 없는 경우에는 - 1을 출력한다.
//back : 큐의 가장 뒤에 있는 정수를 출력한다.만약 큐에 들어있는 정수가 없는 경우에는 - 1을 출력한다.
class queue {
	int que_size;
	int f, r;
	int* que;
public:
	queue(int size = 2'000'000) {
		que_size = 0;
		f = r = 0;
		que = new int[size];
	}
	void push(int X) {
		que[r] = X;
		r++;
		que_size++;
	}
	void pop() {
		if (empty()) { cout << "-1\n"; return; }
		cout << que[f] << "\n";
		f++;
		que_size--;
	}
	void size() {
		cout << que_size << "\n";
	}
	bool empty() {
		return que_size == 0;
	}
	void front() {
		if (empty()) {
			cout << "-1\n";
		}
		else {
			cout << que[f] << "\n";
		}
	}
	void back() {
		if (empty()) {
			cout << "-1\n";
		}
		else {
			cout << que[r - 1] << "\n";
		}
	}
};
int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	int iter_num, inputX;
	string command;
	queue my_que;

	cin >> iter_num;
	while (iter_num-- > 0) {
		cin >> command;
		if (command == "push") { cin >> inputX; my_que.push(inputX); }
		else if (command == "pop") { my_que.pop(); }
		else if (command == "size") { my_que.size(); }
		else if (command == "empty") { cout << my_que.empty() << "\n"; }
		else if (command == "front") { my_que.front(); }
		else if (command == "back") { my_que.back(); }
	}
}
