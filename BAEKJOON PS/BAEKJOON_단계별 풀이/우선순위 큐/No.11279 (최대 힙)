#include <iostream>
#include <vector>
using namespace std;
class Heap {
	int last_index, last_node;
	vector<int>heap_array;
public:
	Heap(int array_size = 100) {
		last_index = 0; // 인덱스 0으로 초기화
		heap_array.push_back(0); // index Rank화.
	}
	void insert(int value) {	// O(1)
		last_index++;
		heap_array.push_back(value);
		upheap();
	}
	void pop() {		// O(log n)
		if (last_index == 0) { cout << 0 << "\n"; return; }
		cout << heap_array.at(1) << "\n";
		heap_array.at(1) = heap_array.at(last_index--);	// root ↔ lastnode swap 후 lastnode - 1
		heap_array.pop_back();
		downheap();
	}
	void upheap() {		// O(log n)
		int i = last_index;
        while (i > 1) {
            if (heap_array.at(i) > heap_array.at(i / 2)) {
                swap_value(i, int(i / 2));
            }
            i = int(i / 2);
        }
	}
	void downheap() {		// O(log n)
		int i = 1, ordered_child;
        while (i * 2 <= last_index) {
            if (i * 2 == last_index) { ordered_child = i * 2; }
            else { ordered_child = get_ord_child(i); }
            if (heap_array.at(ordered_child) > heap_array.at(i)) {
                swap_value(ordered_child, i);
            }
            i = ordered_child;	// i → child로 증가
        }
	}
	int get_ord_child(int index) {
		int ord_child;
		ord_child = (heap_array.at(index * 2) < heap_array.at(index * 2 + 1)) ? index * 2 + 1 : index * 2;
		return ord_child;
	}
	void swap_value(int child_index, int parent_index) {	// O(1)
		// 이진수 xor 사용
		heap_array.at(child_index) = heap_array.at(child_index) ^ heap_array.at(parent_index);
		heap_array.at(parent_index) = heap_array.at(child_index) ^ heap_array.at(parent_index);
		heap_array.at(child_index) = heap_array.at(child_index) ^ heap_array.at(parent_index);
		// → array.at(child_index) ^= array.at(parent_index) ^= array.at(child_index) ^= array.at(parent_index);
	}
};
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
	int iter_number, value_number;
	Heap max_heap;
	cin >> iter_number;
	for (int i = 0; i < iter_number; i++) {
		cin >> value_number;
		if (value_number == 0){
            max_heap.pop();
        }
        else{
            max_heap.insert(value_number);
        }
	}
}
