#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;
vector<int> vertex_in;
vector<int> vertex_list[1001];
int visit[1001];
int cc_num;
int vertex_num;
void BFS__count_cc(int rest_vertex_num) {
	queue<int> bfs_q;
	int start;		// start vertex
	int v;
	do {
		start = vertex_in.front();
		cc_num++;
		bfs_q.push(start);
		visit[start] = 1;
		while (!bfs_q.empty()) {
			v = bfs_q.front();
			vertex_in.erase(remove(vertex_in.begin(), vertex_in.end(), v), vertex_in.end());	// new vertex 방문하면 전체 vertex sequence에서 해당 vertex 제거
			bfs_q.pop();		// pop just entered vertex
			for (int i = 0; i < vertex_list[v].size(); i++) {
				if (!visit[vertex_list[v][i]]) {
					bfs_q.push(vertex_list[v][i]);
					visit[vertex_list[v][i]] = 1;
				}
			}
		}
	} while (vertex_in.size() != 0);
	cout << cc_num + rest_vertex_num;
}
int main() {
	int edge_num, vertex1, vertex2, vertex_num_dummy;
	cin >> vertex_num >> edge_num;
	vertex_num_dummy = vertex_num;		// edge 없이 vertex만 있는 경우 고려
	for (int i = 0; i < edge_num; i++) {
		cin >> vertex1 >> vertex2;
		if (vertex_list[vertex1].size() == 0) { vertex_num_dummy--; vertex_in.push_back(vertex1); }
		if (vertex_list[vertex2].size() == 0) { vertex_num_dummy--; vertex_in.push_back(vertex2); }
		vertex_list[vertex1].push_back(vertex2);
		vertex_list[vertex2].push_back(vertex1);
	}
	if (edge_num == 0) { cout << vertex_num; }
	else { BFS__count_cc(vertex_num_dummy); }
}
